{"ast":null,"code":"export class Api {\n  constructor(apiHost, authToken) {\n    this.apiHost = apiHost;\n    this.authToken = authToken;\n    this.cardUrl = this.apiHost + '/cards';\n    this.userUrl = this.apiHost + '/users/me';\n    this.avatarUrl = this.userUrl + '/avatar';\n  }\n  saveRemoteLike(cardId) {\n    return fetch(this.cardUrl + '/' + cardId + '/likes', {\n      method: 'PUT',\n      headers: {\n        'authorization': this.authToken\n      }\n    }).then(this._checkResponse);\n  }\n  deleteRemoteLike(cardId) {\n    return fetch(this.cardUrl + '/' + cardId + '/likes', {\n      method: 'DELETE',\n      headers: {\n        'authorization': this.authToken\n      }\n    }).then(this._checkResponse);\n  }\n  saveUser(userInfo) {\n    return fetch(this.userUrl, {\n      method: 'PATCH',\n      headers: {\n        'authorization': this.authToken,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        name: userInfo.name,\n        about: userInfo.profession\n      })\n    }).then(this._checkResponse);\n  }\n  getUser(data) {\n    return fetch(this.userUrl, {\n      method: 'GET',\n      headers: {\n        'authorization': this.authToken\n      }\n    }).then(this._checkResponse);\n  }\n  saveCard(placeInfo) {\n    return fetch(this.cardUrl, {\n      method: 'POST',\n      headers: {\n        'authorization': this.authToken,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        name: placeInfo.card_title,\n        link: placeInfo.image_link\n      })\n    }).then(this._checkResponse);\n  }\n  deleteCard(cardId) {\n    return fetch(this.cardUrl + '/' + cardId, {\n      method: 'DELETE',\n      headers: {\n        'authorization': this.authToken,\n        'Content-Type': 'application/json'\n      }\n    }).then(this._checkResponse);\n  }\n  getAllCards() {\n    return fetch(this.cardUrl, {\n      method: 'GET',\n      headers: {\n        'authorization': this.authToken\n      }\n    }).then(this._checkResponse);\n  }\n  postNewAvatar(imageLink) {\n    return fetch(this.avatarUrl, {\n      method: 'PATCH',\n      headers: {\n        'authorization': this.authToken,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        avatar: imageLink.avatar_link\n      })\n    }).then(this._checkResponse);\n  }\n  _checkResponse(res) {\n    if (res.ok) {\n      return res.json();\n    }\n    return Promise.reject(`Ошибка: ${res.status}`);\n  }\n}","map":{"version":3,"names":["Api","constructor","apiHost","authToken","cardUrl","userUrl","avatarUrl","saveRemoteLike","cardId","fetch","method","headers","then","_checkResponse","deleteRemoteLike","saveUser","userInfo","body","JSON","stringify","name","about","profession","getUser","data","saveCard","placeInfo","card_title","link","image_link","deleteCard","getAllCards","postNewAvatar","imageLink","avatar","avatar_link","res","ok","json","Promise","reject","status"],"sources":["/Users/olga/Desktop/Проекты/sprint-10/mesto-react/src/components/Api.js"],"sourcesContent":["export class Api {\n    constructor(apiHost, authToken) {\n        this.apiHost = apiHost;\n        this.authToken = authToken;\n\n        this.cardUrl = this.apiHost + '/cards';\n        this.userUrl = this.apiHost + '/users/me';\n        this.avatarUrl = this.userUrl + '/avatar';\n\n    }\n\n    saveRemoteLike(cardId) {\n        return fetch(this.cardUrl + '/' + cardId + '/likes', {\n            method: 'PUT',\n            headers: {\n                'authorization': this.authToken\n            }\n        })\n            .then(this._checkResponse);\n    }\n\n    deleteRemoteLike(cardId) {\n        return fetch(this.cardUrl + '/' + cardId + '/likes', {\n            method: 'DELETE',\n            headers: {\n                'authorization': this.authToken\n            }\n        })\n            .then(this._checkResponse);\n    }\n\n    saveUser(userInfo) {\n        return fetch(this.userUrl, {\n            method: 'PATCH',\n            headers: {\n                'authorization': this.authToken,\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                name: userInfo.name,\n                about: userInfo.profession\n            })\n        })\n            .then(this._checkResponse);\n    }\n\n    getUser(data) {\n        return fetch(this.userUrl, {\n            method: 'GET',\n            headers: {\n                'authorization': this.authToken\n            }\n        })\n            .then(this._checkResponse);\n    }\n\n    saveCard(placeInfo) {\n        return fetch(this.cardUrl, {\n            method: 'POST',\n            headers: {\n                'authorization': this.authToken,\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                name: placeInfo.card_title,\n                link: placeInfo.image_link\n            })\n        })\n            .then(this._checkResponse);\n    }\n\n    deleteCard(cardId) {\n        return fetch(this.cardUrl + '/' + cardId,\n            {\n                method: 'DELETE',\n                headers: {\n                    'authorization': this.authToken,\n                    'Content-Type': 'application/json'\n                }\n            })\n            .then(this._checkResponse);\n    }\n\n    getAllCards() {\n        return fetch(this.cardUrl, {\n            method: 'GET',\n            headers: {\n                'authorization': this.authToken\n            }\n        })\n            .then(this._checkResponse);\n    }\n\n    postNewAvatar(imageLink) {\n        return fetch(this.avatarUrl, {\n            method: 'PATCH',\n            headers: {\n                'authorization': this.authToken,\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                avatar: imageLink.avatar_link\n            })\n        })\n            .then(this._checkResponse);\n    }\n\n    _checkResponse(res) {\n        if (res.ok) {\n            return res.json();\n        }\n        return Promise.reject(`Ошибка: ${res.status}`);\n    }\n\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}